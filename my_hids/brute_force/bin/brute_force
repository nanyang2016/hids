#!/bin/bash

# set -x 

todolist="
	2.limit_time
	3.new log or add to log 
"

str="Oct 15 21:25:26 ny-ubuntu sshd[7826]: Failed password for root from 120.77.47.97 port 45904 ssh2"

. ../../lib/do_log 

brute_force_path=$(cd $(dirname $0)/..;pwd)
bin_file="$brute_force_path/bin/brute_force"
conf_file="$brute_force_path/conf/ssh.conf"
log_file="$brute_force_path/log/brute_force.log"

monitor_file=""
key_words=""
limit_time=0
limit_error_num=0
scan_frequency=0
white_list=""
white_list_arr=()

declare -a bf_ip_arr=()
declare -a bf_ip_count_arr=()
declare bf_arr_index=0
declare file_offset=0 old_file_offset=0
declare config_str=""

parse_conf(){
	local log_file_content key_word_tmp key_word value_tmp value line
	local ret=0

	while read line
	do
		[ "${line:0:1}" == "#" -o -z "$line" ] && continue		

		key_word_tmp=${line%%]*}
		key_word=${key_word_tmp:1}
		value_tmp=${line%]*}
		value=${value_tmp##*[}

		case $key_word in
			"monitor_file") 
				monitor_file="$value"
				;;  
			"key_words") 
				key_words="$value"
				;;  
			"limit_time") 
				limit_time=$value
				;;  
			"limit_error_num") 
				limit_error_num=$value
				;;  
			"scan_frequency") 
				scan_frequency=$value
				;;  
			"white_list") 
				white_list_arr[${#white_list_arr[@]}]="$value"
				white_list="$value"
				;;  
			*)
				do_log 3 "Error config option ${key_word}."
				#ret=1
				;;
		esac
	done < $conf_file
	
	if [ ! -f "$monitor_file" ];then
		do_log 3 "Can not find monitor file."
		ret=2
	fi

	if [ $limit_time -lt 0 ];then
		do_log 3 "Error limit_time."
		ret=3
	fi

	if [ $limit_error_num -lt 0 ];then
		do_log 3 "Error limit error num"
		ret=4
	fi

	if [ $scan_frequency -lt 0 ];then
		do_log 3 "Error scan frequency."
		ret=5
	fi

	return $ret
}

show_conf(){
	local tmp_ip
	
	do_log 1 "monitor_file=${monitor_file}"
	do_log 1 "key_words=${key_words}"
	do_log 1 "limit_time=${limit_time}"
	do_log 1 "limit_error_num=${limit_error_num}"
	do_log 1 "scan_frequency=${scan_frequency}"
	for tmp_ip in ${white_list_arr[@]}
	do
		do_log 1 "white_list=$tmp_ip"
	done
}

init(){
	local ret=0
	
	echo -ne "" > $log_file
	do_log 1 "Brute force start."

	if [ -f "$conf_file" -a -f "$log_file" ];then
		parse_conf
		ret=$?
		[ "$ret" != "0" ] && return 1
	else
		do_log 3 "configuration file or log file missed."
		return 2
	fi 

	file_offset=`wc -l $monitor_file|awk '{print $1}'`
	old_file_offset=$file_offset
	
	return 0
}

analysis_log(){
	log_str="$1"

	#no brute force
	[[ "$1" =~ "$key_words" ]] || return 0	
	
	return 1
}

is_new_ip(){
	local tmp_ip

	for tmp_ip in "${bf_ip_arr[@]}"
	do
		[ "$tmp_ip"x = "$1"x ] && return 1
	done

	return 0
}


handle_bf(){
	local log_str bf_time bf_user bf_ip
	local tmp_index=0 tmp_ip

	log_str="$1"

	bf_time=$(echo $log_str| cut -d " " -f 1-3)
	bf_user=$(echo $log_str| sed -n 's/^.*for \(.*\) from.*$/\1/p')
	bf_ip=$(echo $log_str| grep -E -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|localhost")
	
	[[ ${white_list_arr[@]} =~ "$bf_ip" ]] && return

	is_new_ip "$bf_ip"
	ret=$?
	if [ $ret -eq 0 ];then
		#is new ip
		bf_ip_arr[$bf_arr_index]="$bf_ip"
		((bf_ip_count_arr[$bf_arr_index]=1))
		((bf_arr_index++))
	else
		#old ip
		for tmp_ip in "${bf_ip_arr[@]}"
		do
			[ "$tmp_ip"x == "$bf_ip"x ] && break
			((tmp_index++))
		done
		((bf_ip_count_arr[$tmp_index]++))
	fi
}

is_reached_threshold(){
	local tmp_count tmp_index alarm_str

	for tmp_count in "${bf_ip_count_arr[@]}"
	do
		if [[ $tmp_count -ge $limit_error_num ]]; then
			alarm_str="IP:${bf_ip_arr[$tmp_index]} is try to login ${tmp_count} times"
			do_log 2 "$alarm_str"
			bf_ip_count_arr[$tmp_index]=0
		else
			((tmp_index++))
	 	fi
	done

}

do_analysis(){
	local new_add_log bf_num log_line
	local old_ifs

	file_offset=$(wc -l $monitor_file|awk '{print $1}')
	[ $old_file_offset -eq $file_offset ] && return 1

	old_ifs=$IFS
	IFS=$'\n'
	for log_line in $(sed -n "$old_file_offset,\$p" $monitor_file| tail -n +2)
	do	
		analysis_log "$log_line"
		ret=$?
		[ $ret -eq 0 ] && continue

		handle_bf "$log_line"
	done
	IFS=$old_ifs

	is_reached_threshold 
	old_file_offset=$file_offset	
	
	return 0
}

analysis_loop(){
	for((;;))
	do
		do_analysis 
		sleep $scan_frequency
	done
}

main(){
	init
	ret=$?
	if [ $ret -eq 0 ];then
		do_log 1 "Initialization successful.$config_str"
		show_conf
	else
		do_log 3 "Initialization failed."
		return 1
	fi

	analysis_loop
}

main $@
