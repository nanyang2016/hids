#!/bin/bash

# set -x 

str="Oct 15 21:25:26 ny-ubuntu sshd[7826]: Failed password for root from 120.77.47.97 port 45904 ssh2"

brute_force_path=$(cd $(dirname $0)/..;pwd)
bin_file="$brute_force_path/bin/brute_force"
conf_file="$brute_force_path/conf/ssh.conf"
log_file="$brute_force_path/log/brute_force.log"

monitor_file=""
key_words=""
limit_time=0
limit_error_num=0
scan_frequency=0
white_list=""

declare -a bf_ip_arr=()
declare -a bf_ip_count_arr=()
declare bf_arr_index=0
declare file_offset=0 old_file_offset=0

INFO=1
ALARM=2
ERROR=3

do_log(){
	local log_time log_type log_content

	case $1 in
		1 )log_type="[INFO]"
			;;
		2 )log_type="[ALARM]"
			;;
		3 )log_type="[ERROR]"
			;;
	esac

	log_time=$(date +"%Y%m%d_%H:%M:%S")
	log_content="$2"

	printf "%-18s %-8s %s\n" "$log_time" "$log_type" "$log_content"	>> $log_file
}


parse_conf(){
	local log_file_content key_word_tmp key_word value_tmp value
	local rt=0

	log_file_content=$(cat $conf_file)
	while read line
	do
		key_word_tmp=${line%%]*}
		key_word=${key_word_tmp:1}
		value_tmp=${line%]*}
		value=${value_tmp##*[}
		case $key_word in
			"monitor_file") 
				monitor_file="$value"
				;;  
			"key_words") 
				key_words="$value"
				;;  
			"limit_time") 
				limit_time=$value
				;;  
			"limit_error_num") 
				limit_error_num=$value
				;;  
			"scan_frequency") 
				scan_frequency=$value
				;;  
			"white_list") 
				white_list="value"
				;;  
			*)
				rt=1
				;;
		esac
	done < $conf_file

	return $rt
}

show(){
	echo $monitor_file
	echo $key_words
	echo $limit_time
	echo $limit_error_num
	echo $scan_frequency
	echo ">"$white_list
}

init(){
	parse_conf
	# show

	echo -n ""> $log_file

	file_offset=`wc -l $monitor_file|awk '{print $1}'`
	old_file_offset=$file_offset
}

analysis_log(){
	log_str="$1"

	#no brute force
	[[ "$1" =~ "$key_words" ]] || return 0	
	
	return 1
}

is_new_ip(){
	local tmp_ip

	for tmp_ip in "${bf_ip_arr[@]}"
	do
		[ "$tmp_ip"x = "$1"x ] && return 1
	done

	return 0
}

handle_bf(){
	local log_str bf_time bf_user bf_ip
	local tmp_index=0 tmp_ip

	log_str="$1"

	bf_time=$(echo $log_str| cut -d " " -f 1-3)
	bf_user=$(echo $log_str| sed -n 's/^.*for \(.*\) from.*$/\1/p')
	bf_ip=$(echo $log_str| grep -E -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|localhost")
	
	is_new_ip "$bf_ip"
	ret=$?
	if [ $ret -eq 0 ];then
		#is new ip
		bf_ip_arr[$bf_arr_index]="$bf_ip"
		((bf_ip_count_arr[$bf_arr_index]=1))
		((bf_arr_index++))
	else
		#old ip
		for tmp_ip in "${bf_ip_arr[@]}"
		do
			[ "$tmp_ip"x == "$bf_ip"x ] && break
			((tmp_index++))
		done
		((bf_ip_count_arr[$tmp_index]++))
	fi

	############### diff ??????
	for ip in "${bf_ip_arr[@]}"
	do
		echo -n "     $ip"
	done
	echo "<<"
}

is_reached_threshold(){

	# for tmp_count in "${bf_ip_count_arr[@]}"
	# do
	# 	echo $tmp_count
	# 	if [[ $tmp_count -ge $limit_error_num ]]; then
	# 		echo "${bf_ip_arr[$tmp_index]} is bf $tmp_count"
	# 		bf_ip_count_arr[$tmp_index]=0
	# 	else
	# 		((tmp_index++))
	# 	fi
	# done

echo "okok"
}

do_analysis(){
	local new_add_log bf_num

	file_offset=$(wc -l $monitor_file|awk '{print $1}')
	[ $old_file_offset -eq $file_offset ] && return 1
	sed -n "$old_file_offset,\$p" $monitor_file| tail -n +2| while read log_line
	do	
		analysis_log "$log_line"
		ret=$?
		[ $ret -eq 0 ] && continue

		handle_bf "$log_line"
	done

	################################## why empty array
	for ip in "${bf_ip_arr[@]}"
	do
		echo -n "     $ip"
	done
	echo "<<<<<"

	is_reached_threshold "${bf_ip_arr[*]}"
	old_file_offset=$file_offset	
	
	return 0
}

analysis_loop(){

	for((;;))
	do
		do_analysis 
		sleep $scan_frequency
	done
}

main(){
	# parse_conf
#	show
	init

	analysis_loop
}

main 
